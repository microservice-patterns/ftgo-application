
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractDependenciesVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'

        classpath "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:${js2pVersion}"
        classpath "io.eventuate.tram.core:eventuate-tram-spring-commands:$eventuateTramVersion"
        classpath "io.eventuate.tram.core:eventuate-tram-spring-events:$eventuateTramVersion"

    }
}

apply plugin: FtgoServicePlugin

apply plugin: 'spring-cloud-contract'
apply plugin: 'docker-compose'
apply plugin: 'com.google.protobuf'

apply plugin: IntegrationTestsPlugin
apply plugin: ComponentTestsPlugin

apply plugin: FtgoJSONSchema2PojoPlugin

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:$springCloudContractDependenciesVersion"
    }
}

contracts {
    contractsDslDir = new File("../ftgo-order-service-contracts/src/main/resources/contracts")
    packageWithBaseClasses = 'net.chrisrichardson.ftgo.orderservice.contract'
    generatedTestSourcesDir = project.file("${project.buildDir}/generated-integration-test-sources/contracts")
    sourceSet = "integrationTest"
}

sourceSets {
    integrationTest {
        java {
            srcDir project.file("${project.buildDir}/generated-integration-test-sources/contracts")
        }
    }
}

compileTestGroovy.enabled=false

componentTest.dependsOn(assemble)


dockerCompose {

    startedServices = [ 'not-used']

    integrationTests {
        startedServices = [ 'mysql']
        stopContainers = true
    }

    componentTests {
        startedServices = [ 'ftgo-order-service']
        //forceRecreate = true
	stopContainers = true
    }

}

integrationTest.dependsOn(integrationTestsComposeUp)
componentTestsComposeUp.dependsOn(integrationTestsComposeUp)
componentTest.dependsOn(componentTestsComposeUp)


protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
    }
}

apply plugin: 'idea'

idea {
    module {
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}

// This is already done by ComponentTestsPlugin
// apply plugin: 'eclipse'

eclipse {
  sourceSets {
    main {
      java {
         srcDirs += ["build/generated/source/proto/main/java", "build/generated/source/proto/main/grpc"]
      }
    }
  }
}

dependencies {

    ftgoApiSpecification project(":ftgo-consumer-service-api-spec")
    ftgoApiSpecification project(":ftgo-accounting-service-api-spec")
    ftgoApiSpecification project(":ftgo-restaurant-service-api-spec")

    compile project(":common-swagger")
    compile project(":ftgo-common-jpa")

    compile 'org.jetbrains:annotations:13.0'
    compile "io.eventuate.tram.core:eventuate-tram-aggregate-domain-events:$eventuateTramVersion"
    compile "io.eventuate.tram.core:eventuate-tram-spring-jdbc-kafka:$eventuateTramVersion"
    compile "io.eventuate.tram.core:eventuate-tram-spring-commands:$eventuateTramVersion"

    compile "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration-simple-dsl:$eventuateTramSagasVersion"

    compile project(":ftgo-accounting-service-api")
    compile project(":ftgo-consumer-service-api")
    compile project(":ftgo-kitchen-service-api")
    compile project(":ftgo-restaurant-service-api")
    compile project(":ftgo-order-service-api")


    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile 'javax.el:javax.el-api:2.2.5'

    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"

    //compile "io.microservices.tools.canvas:microservice-canvas-springmvc:$microserviceCanvasVersion"
    //compile "io.microservices.tools.canvas:microservice-canvas-extractor-tram-sagas:$microserviceCanvasVersion"
    compile "io.eventuate.tram.core:eventuate-tram-spring-messaging:$eventuateTramVersion"
    compile "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration:$eventuateTramSagasVersion"

    compile('org.apache.kafka:kafka-clients:2.3.0') {
        force = true
    }


    testCompile "io.eventuate.util:eventuate-util-test:$eventuateUtilVersion"
    testCompile "io.eventuate.tram.core:eventuate-tram-test-util:$eventuateTramVersion"

    testCompile "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-in-memory:$eventuateTramSagasVersion"
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    // Added this stuff

    testCompile "net.chrisrichardson.ftgo:ftgo-accounting-service-contracts:unspecified:stubs"
    testCompile "net.chrisrichardson.ftgo:ftgo-consumer-service-contracts:unspecified:stubs"
    testCompile "net.chrisrichardson.ftgo:ftgo-kitchen-service-contracts:unspecified:stubs"
    testCompile "org.springframework.cloud:spring-cloud-contract-wiremock"
    testCompile "org.springframework.cloud:spring-cloud-starter-contract-stub-runner"
    testCompile 'io.rest-assured:rest-assured:3.0.6'
    testCompile 'io.rest-assured:spring-mock-mvc:3.0.6'
    testCompile "io.rest-assured:json-path:3.0.6"

    testCompile "io.eventuate.tram.core:eventuate-tram-spring-testing-support-cloud-contract:$eventuateTramVersion"

    testCompile "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support:$eventuateTramSagasVersion"

    componentTestCompile 'info.cukes:cucumber-java:1.2.5'
    componentTestCompile 'info.cukes:cucumber-junit:1.2.5'
    componentTestCompile 'info.cukes:cucumber-spring:1.2.5'

    testCompile project(":ftgo-test-util")
    testCompile "org.hamcrest:hamcrest:2.1"

    integrationTestCompile "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-testing-support-cloud-contract:$eventuateTramSagasVersion"
    integrationTestCompile "io.eventuate.tram.core:eventuate-tram-spring-in-memory:$eventuateTramVersion"

}

ftgoJsonSchema2Pojo {

    ftgoConsumerService {
        source = files("${ftgoApiSpecsDir}/ValidateOrderByConsumer.json")
        targetPackage = "net.chrisrichardson.ftgo.consumerservice.api"
        includeAdditionalProperties = false
        generateBuilders = true
        useLongIntegers = true
    }
    ftgoAccountingService {
        source = files("${ftgoApiSpecsDir}/messages")
        targetPackage = "net.chrisrichardson.ftgo.accountservice.api"
        includeAdditionalProperties = false
        generateBuilders = true
        useLongIntegers = true
    }
    ftgoRestaurantService {
        source = files("${ftgoApiSpecsDir}/ftgo-restaurant-service-api-spec/messages")
        targetPackage = "net.chrisrichardson.ftgo.restaurantservice.events"
        includeAdditionalProperties = false
        generateBuilders = true
        useLongIntegers = true
    }

}
